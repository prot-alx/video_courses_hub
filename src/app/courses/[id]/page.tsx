// app/courses/[id]/page.tsx (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"use client";
import { useState, useEffect, use } from "react";
import Link from "next/link";
import Image from "next/image";
import { useAuth } from "@/lib/hooks/useAuth";
import { useCourseRequest } from "@/lib/hooks/useApi";
import { formatDuration, formatCourseDuration } from "@/lib/utils";

interface Params {
  id: string;
}

interface Video {
  id: string;
  title: string;
  isFree: boolean;
  duration: number | null;
  orderIndex: number;
  hasAccess: boolean;
}

interface Course {
  id: string;
  title: string;
  description: string | null;
  price: number | null;
  isFree: boolean;
  hasAccess: boolean;
  videosCount: number;
  freeVideosCount: number;
  videos: Video[];
  thumbnail: string | null;
}

interface RequestStatus {
  hasAccess: boolean;
  status: string;
  canRequest?: boolean;
  canCancel?: boolean;
  requestId?: string;
  createdAt?: string;
  processedAt?: string;
  grantedAt?: string;
  lastCancelled?: string;
}

export default function CoursePage({
  params,
}: Readonly<{ params: Promise<Params> }>) {
  const resolvedParams = use(params);
  const { isAuthenticated, user } = useAuth();
  const {
    createRequest,
    cancelRequest,
    getRequestStatus,
    loading: requestLoading,
  } = useCourseRequest();

  const [course, setCourse] = useState<Course | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [requestStatus, setRequestStatus] = useState<RequestStatus | null>(
    null
  );

  const fetchCourse = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/courses/${resolvedParams.id}`);
      const data = await response.json();

      if (data.success) {
        setCourse(data.data);
        setError(null);
      } else {
        setError(data.error || "–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
    } catch (err) {
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞");
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–∞:", err);
    } finally {
      setLoading(false);
    }
  };

  const fetchRequestStatus = async () => {
    if (!isAuthenticated || !course) return;

    try {
      const response = await getRequestStatus(course.id);
      if (response.success && response.data) {
        setRequestStatus(response.data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:", err);
    }
  };

  useEffect(() => {
    fetchCourse();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [resolvedParams.id]);

  useEffect(() => {
    if (course && isAuthenticated) {
      fetchRequestStatus();
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [course, isAuthenticated]);

  const handlePurchaseRequest = async () => {
    if (!course || !user?.email) return;

    try {
      const response = await createRequest(course.id, "email");
      if (response.success) {
        await fetchRequestStatus();
        alert(
          "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –µ—ë –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
        );
      } else {
        alert(response.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏");
      }
    } catch (err) {
      console.log(err);
      alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.");
    }
  };

  const handleCancelRequest = async () => {
    if (!course) return;

    try {
      const response = await cancelRequest(course.id);
      if (response.success) {
        await fetchRequestStatus();
        alert("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
      } else {
        alert(response.error || "–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏");
      }
    } catch (err) {
      console.log(err);
      alert("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.");
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –ø—Ä–µ–≤—å—é—à–∫–∏
  const getThumbnailUrl = (thumbnail: string | null): string | null => {
    if (!thumbnail) return null;

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    if (thumbnail.startsWith("/uploads/")) {
      return `/api${thumbnail}`;
    }

    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
    return `/api/uploads/thumbnails/${thumbnail}`;
  };

  const renderActionButton = () => {
    if (!course) return null;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = user?.role === "ADMIN";

    // –î–ª—è –∞–¥–º–∏–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ—Å—Ç—É–ø–∞
    if (isAdmin) {
      return (
        <button className="btn-discord btn-discord-success">
          ‚úì –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø
        </button>
      );
    }

    // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    if (course.isFree) {
      return (
        <button className="btn-discord btn-discord-primary">
          –°–º–æ—Ç—Ä–µ—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
        </button>
      );
    }

    // –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!isAuthenticated) {
      return (
        <Link href="/auth/signin" className="btn-discord btn-discord-primary">
          –í–æ–π—Ç–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        </Link>
      );
    }

    // –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø
    if (course.hasAccess) {
      return (
        <button className="btn-discord btn-discord-success">
          ‚úì –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç
        </button>
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (requestStatus) {
      switch (requestStatus.status) {
        case "new":
          return (
            <button
              onClick={handleCancelRequest}
              disabled={requestLoading}
              className="btn-discord btn-discord-secondary"
            >
              –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
          );
        case "approved":
          return (
            <button className="btn-discord btn-discord-success">
              ‚úì –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞
            </button>
          );
        case "rejected":
          return (
            <button
              onClick={handlePurchaseRequest}
              disabled={requestLoading}
              className="btn-discord btn-discord-primary"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ
            </button>
          );
        default:
          return (
            <button
              onClick={handlePurchaseRequest}
              disabled={requestLoading}
              className="btn-discord btn-discord-primary"
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </button>
          );
      }
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return (
      <button
        onClick={handlePurchaseRequest}
        disabled={requestLoading}
        className="btn-discord btn-discord-primary"
      >
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
      </button>
    );
  };

  if (loading) {
    return (
      <div
        className="min-h-screen"
        style={{ background: "var(--color-primary-200)" }}
      >
        <div className="flex items-center justify-center py-20">
          <div className="w-8 h-8 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin"></div>
        </div>
      </div>
    );
  }

  if (error || !course) {
    return (
      <div
        className="min-h-screen"
        style={{ background: "var(--color-primary-200)" }}
      >
        <div className="flex items-center justify-center py-20">
          <div className="text-center">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
            </h2>
            <p className="text-gray-600 mb-6">{error}</p>
            <Link href="/" className="btn-discord btn-discord-primary">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å–∞–º
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const thumbnailUrl = getThumbnailUrl(course.thumbnail);

  return (
    <div
      className="min-h-screen"
      style={{ background: "var(--color-primary-200)" }}
    >
      {/* Header */}
      <header
        className="border-b px-6 py-4"
        style={{
          background: "var(--color-primary-300)",
          borderColor: "var(--color-primary-400)",
        }}
      >
        <div className="max-w-7xl mx-auto flex items-center gap-4">
          <Link href="/" className="btn-discord btn-discord-secondary">
            ‚Üê –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º
          </Link>
          <h1
            className="text-xl font-semibold"
            style={{ color: "var(--color-text-primary)" }}
          >
            üìö VideoCourses
          </h1>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Course Info */}
          <div className="lg:col-span-2">
            <div
              className="p-6 rounded-lg border mb-6"
              style={{
                background: "var(--color-primary-300)",
                borderColor: "var(--color-primary-400)",
              }}
            >
              {/* Course Thumbnail */}
              {thumbnailUrl && (
                <div className="mb-6">
                  <div className="relative w-full aspect-video rounded-lg overflow-hidden">
                    <Image
                      src={thumbnailUrl}
                      alt={course.title}
                      fill
                      className="object-cover"
                      sizes="(max-width: 768px) 100vw, (max-width: 1200px) 66vw, 50vw"
                      onError={() => {
                        console.log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é—à–∫–∏ –∫—É—Ä—Å–∞");
                      }}
                    />
                  </div>
                </div>
              )}

              <div className="flex items-start justify-between mb-4">
                <div>
                  <h1
                    className="text-3xl font-bold mb-2"
                    style={{ color: "var(--color-text-primary)" }}
                  >
                    {course.title}
                  </h1>
                  <div className="flex items-center gap-4 mb-4">
                    {course.isFree ? (
                      <span
                        className="px-3 py-1 text-sm rounded-full font-medium"
                        style={{
                          background: "var(--color-success)",
                          color: "var(--color-text-primary)",
                        }}
                      >
                        –ë–µ—Å–ø–ª–∞—Ç–Ω–æ
                      </span>
                    ) : (
                      <span
                        className="px-3 py-1 text-sm rounded-full font-medium"
                        style={{
                          background: "var(--color-warning)",
                          color: "var(--color-primary-300)",
                        }}
                      >
                        {course.price}‚ÇΩ
                      </span>
                    )}
                    <span
                      className="text-sm"
                      style={{ color: "var(--color-text-secondary)" }}
                    >
                      {course.videos.length} –≤–∏–¥–µ–æ ‚Ä¢{" "}
                      {formatCourseDuration(course.videos, "short")}
                    </span>
                  </div>
                </div>
              </div>

              <p
                className="text-base leading-relaxed mb-6"
                style={{ color: "var(--color-text-secondary)" }}
              >
                {course.description}
              </p>

              {renderActionButton()}
            </div>
          </div>

          {/* Video List */}
          <div className="lg:col-span-1">
            <div
              className="p-6 rounded-lg border"
              style={{
                background: "var(--color-primary-300)",
                borderColor: "var(--color-primary-400)",
              }}
            >
              <h3
                className="text-lg font-semibold mb-4"
                style={{ color: "var(--color-text-primary)" }}
              >
                –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫—É—Ä—Å–∞
              </h3>

              <div className="space-y-3">
                {course.videos.map((video, index) => (
                  <Link
                    key={video.id}
                    href={video.hasAccess ? `/videos/${video.id}` : "#"}
                    className={`channel-item block ${
                      !video.hasAccess ? "opacity-60 cursor-not-allowed" : ""
                    }`}
                  >
                    <div className="flex items-center gap-3">
                      <div
                        className="flex-shrink-0 w-8 h-8 rounded flex items-center justify-center text-sm font-medium"
                        style={{ background: "var(--color-primary-400)" }}
                      >
                        {index + 1}
                      </div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <h4
                            className="font-medium truncate"
                            style={{ color: "var(--color-text-primary)" }}
                          >
                            {video.title}
                          </h4>
                          {video.isFree && (
                            <span
                              className="text-xs px-2 py-1 rounded-full ml-2"
                              style={{
                                background: "var(--color-success)",
                                color: "var(--color-text-primary)",
                              }}
                            >
                              FREE
                            </span>
                          )}
                          {!video.hasAccess && !video.isFree && (
                            <span
                              className="text-xs px-2 py-1 rounded-full ml-2"
                              style={{
                                background: "var(--color-primary-400)",
                                color: "var(--color-text-secondary)",
                              }}
                            >
                              üîí
                            </span>
                          )}
                        </div>
                        <p
                          className="text-sm"
                          style={{ color: "var(--color-text-secondary)" }}
                        >
                          {formatDuration(video.duration, "compact")}
                        </p>
                      </div>
                    </div>
                  </Link>
                ))}
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}
