// src/components/layout/AdminContactButton.tsx
"use client";

import { useState, useEffect } from "react";
import { useAuth } from "@/lib/hooks/useAuth";

interface AdminContactButtonProps {
  className?: string;
  position?: "fixed" | "static";
}

export default function AdminContactButton({ 
  className = "", 
  position = "fixed" 
}: AdminContactButtonProps) {
  const { isAuthenticated, isAdmin } = useAuth();
  const [adminTelegram, setAdminTelegram] = useState<string | null>(null);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º Telegram –∞–¥–º–∏–Ω–∞
    const fetchAdminContact = async () => {
      try {
        const response = await fetch("/api/admin/contact");
        const data = await response.json();
        if (data.success) {
          setAdminTelegram(data.data.telegram);
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∞–¥–º–∏–Ω–∞:", error);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
    if (isAuthenticated && !isAdmin) {
      fetchAdminContact();
    }
  }, [isAuthenticated, isAdmin]);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞–º –∏–ª–∏ –µ—Å–ª–∏ Telegram –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  if (isAdmin || !adminTelegram) {
    return null;
  }

  const handleContactAdmin = () => {
    const username = adminTelegram.replace("@", "");
    window.open(`https://t.me/${username}`, "_blank");
  };

  const buttonClasses = position === "fixed" 
    ? "fixed bottom-6 right-6 z-50 btn-discord btn-discord-primary shadow-lg hover:shadow-xl"
    : "btn-discord btn-discord-primary";

  return (
    <button
      onClick={handleContactAdmin}
      className={`${buttonClasses} ${className} flex items-center gap-2`}
      title="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ Telegram"
    >
      <span className="text-lg">üí¨</span>
      <span className="text-sm font-medium">
        {position === "fixed" ? "–ê–¥–º–∏–Ω" : "–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É"}
      </span>
    </button>
  );
}