"use client";
import { useState, useRef } from "react";

interface VideoPlayerProps {
  videoId: string;
  hasAccess: boolean;
  poster?: string;
  title?: string;
  className?: string;
}

export default function VideoPlayer({
  videoId,
  hasAccess,
  poster,
  className = "",
}: Readonly<VideoPlayerProps>) {
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [buffering, setBuffering] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);

  const handleVideoClick = (e: React.MouseEvent) => {
    e.preventDefault();
    if (videoRef.current) {
      if (videoRef.current.paused) {
        videoRef.current.play();
      } else {
        videoRef.current.pause();
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –¥–ª—è —Ñ—É–ª—Å–∫—Ä–∏–Ω–∞
  const handleVideoDoubleClick = (e: React.MouseEvent) => {
    e.preventDefault();
    if (videoRef.current) {
      if (document.fullscreenElement) {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–ª—Å–∫—Ä–∏–Ω–∞
        document.exitFullscreen();
      } else {
        // –í—Ö–æ–¥–∏–º –≤ —Ñ—É–ª—Å–∫—Ä–∏–Ω
        videoRef.current.requestFullscreen().catch((err) => {
          console.log("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ñ—É–ª—Å–∫—Ä–∏–Ω:", err);
        });
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫ (–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é)
    return false;
  };

  const handleDragStart = (e: React.DragEvent) => {
    e.preventDefault(); // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
    return false;
  };

  if (!hasAccess) {
    return (
      <div
        className={`aspect-video rounded-lg flex items-center justify-center ${className}`}
        style={{ background: "var(--color-primary-400)" }}
      >
        <div className="text-center">
          <div className="text-4xl mb-2">üîí</div>
          <p style={{ color: "var(--color-text-secondary)" }}>
            –î–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
          </p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div
        className={`aspect-video rounded-lg flex items-center justify-center ${className}`}
        style={{ background: "var(--color-primary-400)" }}
      >
        <div className="text-center">
          <div className="text-4xl mb-2">‚ö†Ô∏è</div>
          <p style={{ color: "var(--color-text-secondary)" }}>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
          </p>
          <button
            onClick={() => {
              setError(false);
              setLoading(true);
            }}
            className="mt-2 text-sm px-3 py-1 rounded"
            style={{
              background: "var(--color-primary-300)",
              color: "var(--color-text-primary)",
            }}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div
      className={`aspect-video rounded-lg overflow-hidden relative ${className}`}
      style={{ background: "var(--color-primary-400)" }}
    >
      <video
        ref={videoRef}
        controls
        className="w-full h-full"
        poster={poster}
        preload="metadata"
        controlsList="nodownload noremoteplaycast" // ‚Üê –£–±—Ä–∞–ª–∏ nofullscreen, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ñ—É–ª—Å–∫—Ä–∏–Ω
        disablePictureInPicture // ‚Üê –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∞-–≤-–∫–∞—Ä—Ç–∏–Ω–∫–µ
        onContextMenu={handleContextMenu} // ‚Üê –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
        onDragStart={handleDragStart} // ‚Üê –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        onClick={handleVideoClick} // ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–∫ –¥–ª—è –ø–∞—É–∑—ã/–ø–ª–µ—è
        onDoubleClick={handleVideoDoubleClick} // ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ñ—É–ª—Å–∫—Ä–∏–Ω–∞
        onLoadStart={() => setLoading(true)}
        onLoadedData={() => setLoading(false)}
        onWaiting={() => setBuffering(true)}
        onCanPlay={() => setBuffering(false)}
        onPlaying={() => setBuffering(false)}
        onError={() => {
          setLoading(false);
          setError(true);
        }}
        style={{
          display: loading ? "none" : "block",
          userSelect: "none", // ‚Üê CSS: –∑–∞–ø—Ä–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
          WebkitUserSelect: "none",
          MozUserSelect: "none",
          msUserSelect: "none",
          cursor: "pointer", // ‚Üê –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
        }}
      >
        <source src={`/api/videos/${videoId}/stream`} type="video/mp4" />
        <track kind="captions" />
        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ.
      </video>

      {/* –ö–Ω–æ–ø–∫–∞ —Ñ—É–ª—Å–∫—Ä–∏–Ω–∞ */}
      <button
        onClick={handleVideoDoubleClick}
        className="absolute top-4 right-4 bg-black/50 hover:bg-black/70 text-white p-2 rounded-lg transition-all duration-200"
        style={{
          opacity: loading ? 0 : 1,
          pointerEvents: loading ? "none" : "auto",
        }}
        title="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"
      >
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        >
          <polyline points="15,3 21,3 21,9" />
          <polyline points="9,21 3,21 3,15" />
          <line x1="21" y1="3" x2="14" y2="10" />
          <line x1="3" y1="21" x2="10" y2="14" />
        </svg>
      </button>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */}
      <style jsx>{`
        video::-webkit-media-controls-download-button {
          display: none !important;
        }
        video::-webkit-media-controls-picture-in-picture-button {
          display: none !important;
        }
        video {
          outline: none;
        }
      `}</style>
    </div>
  );
}
