"use client";
import { ErrorBoundary } from "./ErrorBoundary";
import { logError } from "@/lib/errors";

interface Props {
  children: React.ReactNode;
}

export function GlobalErrorHandler({ children }: Readonly<Props>) {
  return (
    <ErrorBoundary
      onError={(error, errorInfo) => {
        // –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        logError(error, "GlobalErrorHandler");

        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (process.env.NODE_ENV === "production") {
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Sentry:
          // Sentry.captureException(error, { contexts: { react: errorInfo } });
          // –ò–ª–∏ –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:
          // analytics.track("Error", {
          //   error: error.message,
          //   stack: error.stack,
          //   component: errorInfo.componentStack
          // });
        }
      }}
      fallback={({ error, reset }) => (
        <div className="min-h-screen flex items-center justify-center p-4">
          <div
            className="max-w-lg w-full text-center p-8 rounded-lg border"
            style={{
              background: "var(--color-primary-100)",
              borderColor: "var(--color-primary-400)",
            }}
          >
            <div className="mb-6">
              <h1
                className="text-2xl font-bold mb-4"
                style={{ color: "var(--color-text-primary)" }}
              >
                üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
              </h1>
              <p
                className="text-base mb-4"
                style={{ color: "var(--color-text-secondary)" }}
              >
                –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω—É–ª–æ—Å—å —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π –∏ –Ω–µ –º–æ–∂–µ—Ç
                –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.
              </p>
              <p
                className="text-sm"
                style={{ color: "var(--color-text-secondary)" }}
              >
                –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ
                –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.
              </p>
            </div>

            <div className="space-y-3">
              <button
                onClick={reset}
                className="w-full px-4 py-3 text-base font-medium rounded-md transition-colors"
                style={{
                  background: "var(--color-accent)",
                  color: "white",
                }}
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </button>

              <button
                onClick={() => {
                  // –û—á–∏—â–∞–µ–º localStorage –Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                  try {
                    localStorage.clear();
                    sessionStorage.clear();
                  } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏ storage
                  }
                  window.location.href = "/";
                }}
                className="w-full px-4 py-3 text-base rounded-md border transition-colors"
                style={{
                  background: "transparent",
                  color: "var(--color-text-primary)",
                  borderColor: "var(--color-primary-400)",
                }}
              >
                üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
              </button>

              <a
                href="/contacts"
                className="block w-full px-4 py-3 text-base rounded-md border transition-colors text-center"
                style={{
                  background: "transparent",
                  color: "var(--color-text-secondary)",
                  borderColor: "var(--color-primary-400)",
                  textDecoration: "none",
                }}
              >
                üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
              </a>
            </div>

            {process.env.NODE_ENV === "development" && (
              <details className="mt-6 text-left">
                <summary className="cursor-pointer text-sm opacity-70 mb-2">
                  –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ (—Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
                </summary>
                <pre
                  className="text-xs p-3 rounded overflow-auto max-h-40 border"
                  style={{
                    background: "var(--color-primary-200)",
                    color: "var(--color-text-secondary)",
                    borderColor: "var(--color-primary-400)",
                  }}
                >
                  {error.message}
                  {"\n\n"}
                  {error.stack}
                </pre>
              </details>
            )}
          </div>
        </div>
      )}
    >
      {children}
    </ErrorBoundary>
  );
}
