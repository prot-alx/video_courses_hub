// components/admin/VideoUploadForm.tsx
"use client";

import { useState, useEffect } from "react";

interface VideoUploadFormProps {
  courseId: string;
  onVideoAdded?: () => void;
}

interface UploadedFile {
  filename: string;
  originalName: string;
  size: number;
  type: string;
  duration?: number | null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
}

export default function VideoUploadForm({
  courseId,
  onVideoAdded,
}: Readonly<VideoUploadFormProps>) {
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadedFile, setUploadedFile] = useState<UploadedFile | null>(null);
  const [videoMetadata, setVideoMetadata] = useState({
    displayName: "",
    description: "",
    isFree: false,
    orderIndex: 0,
  });
  const [nextOrderIndex, setNextOrderIndex] = useState(0);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const fetchNextOrderIndex = async () => {
      try {
        const response = await fetch(`/api/admin/videos?courseId=${courseId}`);
        const result = await response.json();

        if (result.success) {
          const maxOrder = result.data.reduce(
            (max: number, video: any) => Math.max(max, video.orderIndex),
            -1
          );
          const nextIndex = maxOrder + 1;
          setNextOrderIndex(nextIndex);
          setVideoMetadata((prev) => ({ ...prev, orderIndex: nextIndex }));
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞:", error);
      }
    };

    fetchNextOrderIndex();
  }, [courseId]);

  const handleFileUpload = async (file: File) => {
    setUploading(true);
    setUploadProgress(0);

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
      const duration = await getVideoDurationFromFile(file);

      const formData = new FormData();
      formData.append("video", file);

      // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω xhr –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞)
      const progressInterval = setInterval(() => {
        setUploadProgress((prev) => {
          if (prev >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return prev + 10;
        });
      }, 200);

      const response = await fetch("/api/admin/upload/video", {
        method: "POST",
        body: formData,
      });

      clearInterval(progressInterval);
      setUploadProgress(100);

      const result = await response.json();

      if (result.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞
        const fileWithDuration = {
          ...result.data,
          duration: duration, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
        };

        setUploadedFile(fileWithDuration);

        // –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        const cleanTitle = result.data.originalName
          .replace(/\.[^/.]+$/, "") // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
          .replace(/[_-]/g, " ") // –ó–∞–º–µ–Ω—è–µ–º _ –∏ - –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
          .replace(/([a-z])([A-Z])/g, "$1 $2") // –†–∞–∑–¥–µ–ª—è–µ–º camelCase
          .trim();

        setVideoMetadata((prev) => ({
          ...prev,
          displayName: cleanTitle,
        }));
      } else {
        alert(result.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞");
    } finally {
      setUploading(false);
      setTimeout(() => setUploadProgress(0), 1000);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
  const getVideoDurationFromFile = (file: File): Promise<number | null> => {
    return new Promise((resolve) => {
      try {
        const video = document.createElement("video");
        video.preload = "metadata";

        video.onloadedmetadata = () => {
          window.URL.revokeObjectURL(video.src);
          const duration = Math.round(video.duration);
          resolve(isNaN(duration) ? null : duration);
        };

        video.onerror = () => {
          window.URL.revokeObjectURL(video.src);
          resolve(null);
        };

        video.src = URL.createObjectURL(file);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", error);
        resolve(null);
      }
    });
  };

  const handleCreateVideo = async () => {
    if (!uploadedFile || !videoMetadata.displayName.trim()) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
      return;
    }

    try {
      const response = await fetch("/api/admin/videos", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          courseId,
          title: videoMetadata.displayName, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          displayName: videoMetadata.displayName,
          description: videoMetadata.description.trim() || null,
          filename: uploadedFile.filename,
          isFree: videoMetadata.isFree,
          orderIndex: videoMetadata.orderIndex,
          duration: uploadedFile.duration, // –ü–µ—Ä–µ–¥–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        }),
      });

      const result = await response.json();

      if (result.success) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setUploadedFile(null);
        setVideoMetadata({
          displayName: "",
          description: "",
          isFree: false,
          orderIndex: nextOrderIndex + 1,
        });
        setNextOrderIndex((prev) => prev + 1);

        alert("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
        onVideoAdded?.();
      } else {
        alert(result.error || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ:", error);
      alert("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ");
    }
  };

  const handleCancel = async () => {
    if (uploadedFile) {
      // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        await fetch(
          `/api/admin/upload/cleanup?filename=${uploadedFile.filename}&type=video`,
          {
            method: "DELETE",
          }
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:", error);
      }
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setUploadedFile(null);
    setVideoMetadata({
      displayName: "",
      description: "",
      isFree: false,
      orderIndex: nextOrderIndex,
    });
  };

  const formatFileSize = (bytes: number) => {
    const mb = bytes / (1024 * 1024);
    return `${mb.toFixed(1)} MB`;
  };

  return (
    <div
      className="p-6 rounded-lg border"
      style={{
        background: "var(--color-primary-300)",
        borderColor: "var(--color-primary-400)",
      }}
    >
      <h2
        className="text-lg font-semibold mb-4"
        style={{ color: "var(--color-text-primary)" }}
      >
        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
      </h2>

      {!uploadedFile ? (
        /* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ */
        <div>
          <div
            className="border-2 border-dashed rounded-lg p-8 text-center mb-4"
            style={{ borderColor: "var(--color-primary-400)" }}
          >
            <div className="text-4xl mb-4">üé•</div>
            <h3
              className="text-lg font-medium mb-2"
              style={{ color: "var(--color-text-primary)" }}
            >
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            </h3>
            <p
              className="text-sm mb-4"
              style={{ color: "var(--color-text-secondary)" }}
            >
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, WebM, MOV, AVI
              <br />
              –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 500 MB
            </p>

            <input
              type="file"
              accept="video/*"
              onChange={(e) => {
                const file = e.target.files?.[0];
                if (file) handleFileUpload(file);
              }}
              disabled={uploading}
              className="hidden"
              id="video-upload"
            />
            <label
              htmlFor="video-upload"
              className={`btn-discord ${
                uploading ? "btn-discord-secondary" : "btn-discord-primary"
              } cursor-pointer`}
            >
              {uploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª"}
            </label>
          </div>

          {uploading && (
            <div className="mb-4">
              <div className="flex items-center justify-between mb-2">
                <span
                  className="text-sm"
                  style={{ color: "var(--color-text-secondary)" }}
                >
                  {uploadProgress < 5
                    ? "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
                    : "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ..."}
                </span>
                <span
                  className="text-sm font-medium"
                  style={{ color: "var(--color-text-primary)" }}
                >
                  {uploadProgress}%
                </span>
              </div>
              <div
                className="w-full h-2 rounded-full overflow-hidden"
                style={{ background: "var(--color-primary-400)" }}
              >
                <div
                  className="h-full transition-all duration-300"
                  style={{
                    background: "var(--color-accent)",
                    width: `${uploadProgress}%`,
                  }}
                />
              </div>
            </div>
          )}
        </div>
      ) : (
        /* –®–∞–≥ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö */
        <div>
          <div
            className="p-4 rounded border mb-4"
            style={{
              background: "var(--color-primary-200)",
              borderColor: "var(--color-primary-400)",
            }}
          >
            <div className="flex items-center gap-3">
              <div className="text-2xl">‚úÖ</div>
              <div>
                <h4
                  className="font-medium"
                  style={{ color: "var(--color-text-primary)" }}
                >
                  {uploadedFile.originalName}
                </h4>
                <p
                  className="text-sm"
                  style={{ color: "var(--color-text-secondary)" }}
                >
                  {formatFileSize(uploadedFile.size)} ‚Ä¢ {uploadedFile.type}
                  {uploadedFile.duration && (
                    <span>
                      {" "}
                      ‚Ä¢ {Math.floor(uploadedFile.duration / 60)}–º{" "}
                      {uploadedFile.duration % 60}—Å
                    </span>
                  )}
                </p>
                <p
                  className="text-xs mt-1"
                  style={{ color: "var(--color-text-secondary)" }}
                >
                  –§–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {uploadedFile.filename}
                </p>
              </div>
            </div>
          </div>

          <div className="space-y-4">
            <div>
              <label
                className="block text-sm font-medium mb-2"
                style={{ color: "var(--color-text-primary)" }}
              >
                –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ *
              </label>
              <input
                type="text"
                value={videoMetadata.displayName}
                onChange={(e) =>
                  setVideoMetadata((prev) => ({
                    ...prev,
                    displayName: e.target.value,
                  }))
                }
                className="input-discord w-full"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"
                maxLength={200}
              />
              <p
                className="text-xs mt-1"
                style={{ color: "var(--color-text-secondary)" }}
              >
                –≠—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (
                {videoMetadata.displayName.length}/200)
              </p>
            </div>

            <div>
              <label
                className="block text-sm font-medium mb-2"
                style={{ color: "var(--color-text-primary)" }}
              >
                –û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ
              </label>
              <textarea
                value={videoMetadata.description}
                onChange={(e) =>
                  setVideoMetadata((prev) => ({
                    ...prev,
                    description: e.target.value,
                  }))
                }
                className="input-discord w-full min-h-[100px] resize-y"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                maxLength={2000}
                rows={4}
              />
              <p
                className="text-xs mt-1"
                style={{ color: "var(--color-text-secondary)" }}
              >
                –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –≤–∏–¥–µ–æ (
                {videoMetadata.description.length}/2000)
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  className="block text-sm font-medium mb-2"
                  style={{ color: "var(--color-text-primary)" }}
                >
                  –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
                </label>
                <input
                  type="number"
                  value={videoMetadata.orderIndex}
                  onChange={(e) =>
                    setVideoMetadata((prev) => ({
                      ...prev,
                      orderIndex: parseInt(e.target.value) || 0,
                    }))
                  }
                  className="input-discord w-full"
                  min="0"
                />
                <p
                  className="text-xs mt-1"
                  style={{ color: "var(--color-text-secondary)" }}
                >
                  –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –≤ —Å–ø–∏—Å–∫–µ –≤–∏–¥–µ–æ
                </p>
              </div>

              <div className="flex items-center gap-2 pt-6">
                <input
                  type="checkbox"
                  id="isFree"
                  checked={videoMetadata.isFree}
                  onChange={(e) =>
                    setVideoMetadata((prev) => ({
                      ...prev,
                      isFree: e.target.checked,
                    }))
                  }
                  className="checkbox-discord"
                />
                <label
                  htmlFor="isFree"
                  className="text-sm"
                  style={{ color: "var(--color-text-primary)" }}
                >
                  –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
                </label>
              </div>
            </div>

            <div className="flex gap-3">
              <button
                onClick={handleCreateVideo}
                className="btn-discord btn-discord-primary"
                disabled={!videoMetadata.displayName.trim()}
              >
                –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ
              </button>
              <button
                onClick={handleCancel}
                className="btn-discord btn-discord-secondary"
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
