import { useState } from "react";
import { useToastContext } from "@/components/providers/ToastProvider";

interface FileDropZoneProps {
  onFileSelect: (file: File) => void;
  uploading: boolean;
  uploadProgress: number;
  fileInputRef: React.RefObject<HTMLInputElement | null>;
  accept?: string;
  maxSizeInfo?: string;
  supportedFormats?: string;
}

export default function FileDropZone({
  onFileSelect,
  uploading,
  uploadProgress,
  fileInputRef,
  accept = "video/*",
  maxSizeInfo = "500 MB",
  supportedFormats = "MP4, WebM, MOV, AVI",
}: Readonly<FileDropZoneProps>) {
  const toast = useToastContext();
  const [isDragOver, setIsDragOver] = useState(false);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag & drop
  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    if (!uploading) {
      setIsDragOver(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã—à—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∞ —ç–ª–µ–º–µ–Ω—Ç, –∞ –Ω–µ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX;
    const y = e.clientY;

    if (x < rect.left || x >= rect.right || y < rect.top || y >= rect.bottom) {
      setIsDragOver(false);
    }
  };

  const handleDrop = async (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setIsDragOver(false);

    if (uploading) return;

    const files = Array.from(e.dataTransfer.files);
    if (files.length === 0) return;

    if (files.length > 1) {
      toast.warning("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–∏–¥–µ–æ—Ñ–∞–π–ª");
      return;
    }

    const file = files[0];
    onFileSelect(file);
  };

  const handleFileInputClick = () => {
    if (!uploading) {
      fileInputRef.current?.click();
    }
  };

  return (
    <div>
      <div
        className={`border-2 border-dashed rounded-lg p-8 text-center mb-4 transition-all duration-200 ${
          isDragOver ? "border-accent bg-accent/10 scale-[1.02]" : ""
        } ${
          uploading
            ? "pointer-events-none opacity-60"
            : "cursor-pointer hover:border-accent/70"
        }`}
        style={{
          borderColor: isDragOver
            ? "var(--color-accent)"
            : "var(--color-primary-400)",
        }}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        onClick={handleFileInputClick}
      >
        <div
          className={`text-4xl mb-4 transition-transform duration-200 ${
            isDragOver ? "scale-110" : ""
          }`}
        >
          {isDragOver ? "‚¨áÔ∏è" : "üé•"}
        </div>
        <h3
          className="text-lg font-medium mb-2"
          style={{ color: "var(--color-text-primary)" }}
        >
          {isDragOver
            ? "–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"
            : "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª"}
        </h3>
        <p
          className="text-sm mb-4"
          style={{ color: "var(--color-text-secondary)" }}
        >
          –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {supportedFormats}
          <br />
          –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {maxSizeInfo}
          <br />
          {isDragOver ? "" : "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞"}
        </p>

        <input
          ref={fileInputRef}
          type="file"
          accept={accept}
          onChange={(e) => {
            const file = e.target.files?.[0];
            if (file) onFileSelect(file);
          }}
          disabled={uploading}
          className="hidden"
          id="video-upload"
        />
        {!isDragOver && (
          <button
            type="button"
            onClick={(e) => {
              e.stopPropagation();
              handleFileInputClick();
            }}
            disabled={uploading}
            className={`btn-discord ${
              uploading ? "btn-discord-secondary" : "btn-discord-primary"
            } transition-all duration-200`}
          >
            {uploading ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª"}
          </button>
        )}
      </div>

      {uploading && (
        <div className="mb-4">
          <div className="flex items-center justify-between mb-2">
            <span
              className="text-sm"
              style={{ color: "var(--color-text-secondary)" }}
            >
              {uploadProgress < 5
                ? "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏..."
                : "–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ..."}
            </span>
            <span
              className="text-sm font-medium"
              style={{ color: "var(--color-text-primary)" }}
            >
              {uploadProgress}%
            </span>
          </div>
          <div
            className="w-full h-2 rounded-full overflow-hidden"
            style={{ background: "var(--color-primary-400)" }}
          >
            <div
              className="h-full transition-all duration-300"
              style={{
                background: "var(--color-accent)",
                width: `${uploadProgress}%`,
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
}
