generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PreferredContact {
  email
  phone
  telegram
}

enum RequestStatus {
  new
  approved
  rejected
  cancelled
}

enum ReviewStatus {
  pending
  approved
  rejected
}

model AdminSettings {
  id              String @id @default("main") // Фиксированный ID
  supportTelegram String?
  supportPhone    String?
  supportEmail    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("admin_settings")
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  googleId          String           @unique
  name              String?
  displayName       String?          // Имя для отображения на платформе
  role              UserRole         @default(USER)
  phone             String?
  telegram          String?
  preferredContact  PreferredContact @default(email)
  createdAt         DateTime         @default(now())
  
  // Relations
  courseAccess      UserCourseAccess[]
  courseRequests    CourseRequest[]
  processedRequests CourseRequest[]    @relation("ProcessedBy")
  grantedAccess     UserCourseAccess[] @relation("GrantedBy")
  reviews           Review[]
  createdNews       News[]
  
  @@map("users")
}

model Course {
  id               String   @id @default(cuid())
  title            String
  shortDescription String?  // Краткое описание для карточек
  fullDescription  String?  // Полное описание для страницы курса
  price            Decimal? // null для бесплатных
  orderIndex       Int      @default(0)
  isFree           Boolean  @default(false)
  isActive         Boolean  @default(true)
  thumbnail        String?
  totalDuration    Int      @default(0)
  createdAt        DateTime @default(now())
 
  // Relations
  videos        Video[]
  userAccess    UserCourseAccess[]
  requests      CourseRequest[]
 
  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  courseId    String
  title       String   // Остается для совместимости с существующим кодом
  displayName String?  // Временно nullable для миграции
  description String?
  filename    String   // Техническое имя файла на сервере  
  orderIndex  Int      @default(0)
  isFree      Boolean  @default(false)
  duration    Int?     // в секундах
  poster      String?  // путь к постеру
  createdAt   DateTime @default(now())
 
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
 
  @@map("videos")
}

model UserCourseAccess {
  userId      String
  courseId    String
  grantedAt   DateTime @default(now())
  grantedBy   String
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  grantedByUser User   @relation("GrantedBy", fields: [grantedBy], references: [id])
  
  @@id([userId, courseId])
  @@map("user_course_access")
}

model CourseRequest {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  status        RequestStatus @default(new)
  contactMethod PreferredContact
  createdAt     DateTime      @default(now())
  processedAt   DateTime?
  processedBy   String?

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  processedByUser User?       @relation("ProcessedBy", fields: [processedBy], references: [id])

  @@unique([userId, courseId]) // ← ИЗМЕНЕНО: убрали status из constraint
  @@map("course_requests")
}

model Review {
  id        String       @id @default(cuid())
  userId    String
  rating    Int          // 1-5 звезд
  comment   String?      // текст отзыва (опционально)
  status    ReviewStatus @default(pending)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Убираем ограничение на один отзыв на пользователя
  @@map("reviews")
}

model News {
  id               String   @id @default(cuid())
  title            String
  shortDescription String   // Краткое описание для карточки
  fullDescription  String   // Подробное описание
  image            String?  // Путь к изображению
  isActive         Boolean  @default(true)
  createdBy        String   // ID админа создавшего новость
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations  
  author           User     @relation(fields: [createdBy], references: [id])

  @@map("news")
}

model SimpleLog {
  id        String   @id @default(cuid())
  action    String
  details   String?
  createdAt DateTime @default(now())
  
  @@map("simple_logs")
}